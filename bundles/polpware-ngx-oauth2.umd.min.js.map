{"version":3,"sources":["ng://@polpware/ngx-oauth2/lib/models/user.model.ts","ng://@polpware/ngx-oauth2/lib/models/permission.model.ts","ng://@polpware/ngx-oauth2/lib/services/oidc-helper.service.ts","ng://@polpware/ngx-oauth2/lib/services/jwt-helper.ts","ng://@polpware/ngx-oauth2/lib/services/auth.service.ts","ng://@polpware/ngx-oauth2/lib/services/auth-guard.service.ts","ng://@polpware/ngx-oauth2/lib/ngx-oauth2.module.ts"],"names":["User","id","userName","fullName","email","jobTitle","phoneNumber","roles","this","Object","defineProperty","prototype","name","Permission","value","groupName","description","viewUsersPermission","manageUsersPermission","viewRolesPermission","manageRolesPermission","assignRolesPermission","OidcHelperService","http","oauthService","configurationServiceProvider","localStoreManagerProvider","clientId","scope","localStorage","get","configurations","baseUrl","loginWithPassword","password","_this","header","HttpHeaders","Content-Type","params","HttpParams","append","issuer","from","loadDiscoveryDocument","pipe","mergeMap","post","tokenEndpoint","headers","refreshLogin","refreshToken","getData","DBkeys","ACCESS_TOKEN","getDataObject","TOKEN_EXPIRES_IN","REFRESH_TOKEN","accessTokenExpiryDate","valueOf","Date","Injectable","HttpClient","OAuthService","ConfigurationServiceAbstractProvider","LocalStoreManagerServiceAbstractProvider","JwtHelper","urlBase64Decode","str","output","replace","length","Error","b64DecodeUnicode","decodeURIComponent","Array","map","call","atob","c","charCodeAt","toString","slice","join","decodeToken","token","parts","split","decoded","JSON","parse","getTokenExpirationDate","hasOwnProperty","date","setUTCSeconds","exp","isTokenExpired","offsetSeconds","AuthService","router","oidcHelperService","previousIsLoggedInCheck","_loginStatus","BehaviorSubject","initializeLoginStatus","loginUrl","homeUrl","getInitEvent","subscribe","reevaluateLoginStatus","gotoPage","page","preserveParams","navigationExtras","queryParamsHandling","preserveFragment","navigate","gotoHomePage","redirectLoginUser","console","log","loginRedirectUrl","redirect","ConfigurationServiceConstants","defaultHomeUrl","urlParamsAndFragment","Utilities","splitInTwo","urlAndParams","firstPart","fragment","secondPart","queryParams","getQueryParamsFromString","redirectLogoutUser","logoutRedirectUrl","redirectForLogin","url","reLogin","reLoginDelegate","resp","processLoginResponse","rememberMe","isLoggedIn","logout","response","accessToken","access_token","refresh_token","expiresIn","expires_in","tokenExpiryDate","setSeconds","getSeconds","accessTokenExpiry","decodedAccessToken","permissions","isArray","permission","import","configuration","user","sub","fullname","jobtitle","phone_number","role","isEnabled","saveUserDetails","savePermanentData","USER_PERMISSIONS","CURRENT_USER","saveSyncedSessionData","REMEMBER_ME","deleteData","clearLocalChanges","currentUser","setTimeout","next","getLoginStatusEvent","asObservable","isSessionExpired","Router","AuthGuard","authService","canActivate","route","state","checkLogin","canActivateChild","canLoad","path","NgxOauth2Module","NgModule","args","declarations","imports","OAuthModule","exports","providers"],"mappings":"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","sourcesContent":["// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\nexport class User {\n    // Note: Using only optional constructor properties without backing store disables typescript's type checking for the type\n    constructor(id?: string, userName?: string, fullName?: string, email?: string, jobTitle?: string, phoneNumber?: string, roles?: string[]) {\n\n        this.id = id;\n        this.userName = userName;\n        this.fullName = fullName;\n        this.email = email;\n        this.jobTitle = jobTitle;\n        this.phoneNumber = phoneNumber;\n        this.roles = roles;\n    }\n\n\n    get friendlyName(): string {\n        let name = this.fullName || this.userName;\n\n        if (this.jobTitle) {\n            name = this.jobTitle + ' ' + name;\n        }\n\n        return name;\n    }\n\n\n    public id: string;\n    public userName: string;\n    public fullName: string;\n    public email: string;\n    public jobTitle: string;\n    public phoneNumber: string;\n    public isEnabled: boolean;\n    public isLockedOut: boolean;\n    public roles: string[];\n}\n","// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\nexport type PermissionNames =\n    'View Users' | 'Manage Users' |\n    'View Roles' | 'Manage Roles' | 'Assign Roles';\n\nexport type PermissionValues =\n    'users.view' | 'users.manage' |\n    'roles.view' | 'roles.manage' | 'roles.assign';\n\nexport class Permission {\n\n    public static readonly viewUsersPermission: PermissionValues = 'users.view';\n    public static readonly manageUsersPermission: PermissionValues = 'users.manage';\n\n    public static readonly viewRolesPermission: PermissionValues = 'roles.view';\n    public static readonly manageRolesPermission: PermissionValues = 'roles.manage';\n    public static readonly assignRolesPermission: PermissionValues = 'roles.assign';\n\n\n    constructor(name?: PermissionNames, value?: PermissionValues, groupName?: string, description?: string) {\n        this.name = name;\n        this.value = value;\n        this.groupName = groupName;\n        this.description = description;\n    }\n\n    public name: PermissionNames;\n    public value: PermissionValues;\n    public groupName: string;\n    public description: string;\n}\n","// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { OAuthService } from 'angular-oauth2-oidc';\n\nimport {\n    ILocalStoreManagerContract,\n    LocalStoreManagerServiceAbstractProvider,\n    IConfigurationServiceContract,\n    ConfigurationServiceAbstractProvider,\n    environment,\n    DBkeys\n} from '@polpware/ngx-appkit-contracts-alpha';\n\nimport { LoginResponse } from '../models/login-response.model';\n\n\n@Injectable()\nexport class OidcHelperService {\n\n    private get baseUrl() { return this.configurations.baseUrl; }\n    private clientId = 'quickapp_spa';\n    private scope = 'openid email phone profile offline_access roles quickapp_api';\n\n    private localStorage: ILocalStoreManagerContract;\n    private configurations: IConfigurationServiceContract;\n\n    constructor(\n        private http: HttpClient,\n        private oauthService: OAuthService,\n        configurationServiceProvider: ConfigurationServiceAbstractProvider,\n        localStoreManagerProvider: LocalStoreManagerServiceAbstractProvider) {\n\n        this.localStorage = localStoreManagerProvider.get();\n        this.configurations = configurationServiceProvider.get();\n\n        /*\n        if (environment.requireHttps !== undefined) {\n            this.oauthService.configure({\n                requireHttps: false\n            });\n        } */\n\n    }\n\n\n    loginWithPassword(userName: string, password: string) {\n        const header = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded' });\n        const params = new HttpParams()\n            .append('username', userName)\n            .append('password', password)\n            .append('client_id', this.clientId)\n            .append('grant_type', 'password')\n            .append('scope', this.scope);\n\n        this.oauthService.issuer = this.baseUrl;\n\n        return from(this.oauthService.loadDiscoveryDocument())\n            .pipe(mergeMap(() => {\n                return this.http.post<LoginResponse>(this.oauthService.tokenEndpoint, params, { headers: header });\n            }));\n    }\n\n    refreshLogin() {\n        const header = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded' });\n        const params = new HttpParams()\n            .append('refresh_token', this.refreshToken)\n            .append('client_id', this.clientId)\n            .append('grant_type', 'refresh_token');\n\n        this.oauthService.issuer = this.baseUrl;\n\n        return from(this.oauthService.loadDiscoveryDocument())\n            .pipe(mergeMap(() => {\n                return this.http.post<LoginResponse>(this.oauthService.tokenEndpoint, params, { headers: header });\n            }));\n    }\n\n    get accessToken(): string {\n        return this.localStorage.getData(DBkeys.ACCESS_TOKEN);\n    }\n\n    get accessTokenExpiryDate(): Date {\n        return this.localStorage.getDataObject<Date>(DBkeys.TOKEN_EXPIRES_IN, true);\n    }\n\n    get refreshToken(): string {\n        return this.localStorage.getData(DBkeys.REFRESH_TOKEN);\n    }\n\n    get isSessionExpired(): boolean {\n        if (this.accessTokenExpiryDate == null) {\n            return true;\n        }\n\n        return this.accessTokenExpiryDate.valueOf() <= new Date().valueOf();\n    }\n}\n","// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\n/**\n * Helper class to decode and find JWT expiration.\n */\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class JwtHelper {\n\n    public urlBase64Decode(str: string): string {\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\n        switch (output.length % 4) {\n            case 0: { break; }\n            case 2: { output += '=='; break; }\n            case 3: { output += '='; break; }\n            default: {\n                throw new Error('Illegal base64url string!');\n            }\n        }\n        return this.b64DecodeUnicode(output);\n    }\n\n    // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n    private b64DecodeUnicode(str: any) {\n        return decodeURIComponent(Array.prototype.map.call(atob(str), (c: any) => {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    public decodeToken(token: string): any {\n        const parts = token.split('.');\n\n        if (parts.length !== 3) {\n            throw new Error('JWT must have 3 parts');\n        }\n\n        const decoded = this.urlBase64Decode(parts[1]);\n        if (!decoded) {\n            throw new Error('Cannot decode the token');\n        }\n\n        return JSON.parse(decoded);\n    }\n\n    public getTokenExpirationDate(token: string): Date {\n        let decoded: any;\n        decoded = this.decodeToken(token);\n\n        if (!decoded.hasOwnProperty('exp')) {\n            return null;\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(decoded.exp);\n\n        return date;\n    }\n\n    public isTokenExpired(token: string, offsetSeconds?: number): boolean {\n        const date = this.getTokenExpirationDate(token);\n        offsetSeconds = offsetSeconds || 0;\n\n        if (date == null) {\n            return false;\n        }\n\n        // Token expired?\n        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\n    }\n}\n","// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\nimport { Injectable } from '@angular/core';\nimport { Router, NavigationExtras } from '@angular/router';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n    ILocalStoreManagerContract,\n    LocalStoreManagerServiceAbstractProvider,\n    IConfigurationServiceContract,\n    ConfigurationServiceAbstractProvider,\n    Utilities,\n    DBkeys,\n    ConfigurationServiceConstants\n} from '@polpware/ngx-appkit-contracts-alpha';\n\nimport { OidcHelperService } from './oidc-helper.service';\nimport { JwtHelper } from './jwt-helper';\nimport { AccessToken, LoginResponse } from '../models/login-response.model';\nimport { User } from '../models/user.model';\nimport { PermissionValues } from '../models/permission.model';\n\n@Injectable()\nexport class AuthService {\n    public get loginUrl() { return this.configurations.loginUrl; }\n    public get homeUrl() { return this.configurations.homeUrl; }\n\n    public loginRedirectUrl: string;\n    public logoutRedirectUrl: string;\n\n    public reLoginDelegate: () => void;\n\n    private previousIsLoggedInCheck = false;\n    private _loginStatus = new BehaviorSubject<boolean>(false);\n\n    private localStorage: ILocalStoreManagerContract;\n    private configurations: IConfigurationServiceContract;\n\n    constructor(\n        private router: Router,\n        private oidcHelperService: OidcHelperService,\n        configurationServiceProvider: ConfigurationServiceAbstractProvider,\n        localStoreManagerProvider: LocalStoreManagerServiceAbstractProvider) {\n\n        this.localStorage = localStoreManagerProvider.get();\n        this.configurations = configurationServiceProvider.get();\n\n        this.initializeLoginStatus();\n    }\n\n    private initializeLoginStatus() {\n        this.localStorage.getInitEvent().subscribe(() => {\n            this.reevaluateLoginStatus();\n        });\n    }\n\n    gotoPage(page: string, preserveParams = true) {\n\n        const navigationExtras: NavigationExtras = {\n            queryParamsHandling: preserveParams ? 'merge' : '', preserveFragment: preserveParams\n        };\n\n        this.router.navigate([page], navigationExtras);\n    }\n\n    gotoHomePage() {\n        this.router.navigate([this.homeUrl]);\n    }\n\n    redirectLoginUser() {\n\n        console.log('loginRedirectUrl 2' + this.loginRedirectUrl);\n        console.log(this.homeUrl);\n\n        const redirect = this.loginRedirectUrl && this.loginRedirectUrl != '/' && this.loginRedirectUrl != ConfigurationServiceConstants.defaultHomeUrl ? this.loginRedirectUrl : this.homeUrl;\n        this.loginRedirectUrl = null;\n\n        console.log('directurl=' + redirect);\n\n        const urlParamsAndFragment = Utilities.splitInTwo(redirect, '#');\n        const urlAndParams = Utilities.splitInTwo(urlParamsAndFragment.firstPart, '?');\n\n        const navigationExtras: NavigationExtras = {\n            fragment: urlParamsAndFragment.secondPart,\n            queryParams: Utilities.getQueryParamsFromString(urlAndParams.secondPart),\n            queryParamsHandling: 'merge'\n        };\n\n        this.router.navigate([urlAndParams.firstPart], navigationExtras);\n    }\n\n    redirectLogoutUser() {\n        const redirect = this.logoutRedirectUrl ? this.logoutRedirectUrl : this.loginUrl;\n        this.logoutRedirectUrl = null;\n\n        this.router.navigate([redirect]);\n    }\n\n    redirectForLogin() {\n        console.log('redirect for login');\n        this.loginRedirectUrl = this.router.url;\n        this.router.navigate([this.loginUrl]);\n    }\n\n    reLogin() {\n        if (this.reLoginDelegate) {\n            this.reLoginDelegate();\n        } else {\n            this.redirectForLogin();\n        }\n    }\n\n    refreshLogin() {\n        return this.oidcHelperService.refreshLogin()\n            .pipe(map(resp => this.processLoginResponse(resp, this.rememberMe)));\n    }\n\n    loginWithPassword(userName: string, password: string, rememberMe?: boolean) {\n        if (this.isLoggedIn) {\n            this.logout();\n        }\n\n        return this.oidcHelperService.loginWithPassword(userName, password)\n            .pipe(map(resp => this.processLoginResponse(resp, rememberMe)));\n    }\n\n    private processLoginResponse(response: LoginResponse, rememberMe?: boolean) {\n        const accessToken = response.access_token;\n\n        if (accessToken == null) {\n            throw new Error('accessToken cannot be null');\n        }\n\n        rememberMe = rememberMe || this.rememberMe;\n\n        const refreshToken = response.refresh_token || this.refreshToken;\n        const expiresIn = response.expires_in;\n        const tokenExpiryDate = new Date();\n        tokenExpiryDate.setSeconds(tokenExpiryDate.getSeconds() + expiresIn);\n        const accessTokenExpiry = tokenExpiryDate;\n        const jwtHelper = new JwtHelper();\n        const decodedAccessToken = jwtHelper.decodeToken(accessToken) as AccessToken;\n\n        const permissions: PermissionValues[] = Array.isArray(decodedAccessToken.permission) ? decodedAccessToken.permission : [decodedAccessToken.permission];\n\n        if (!this.isLoggedIn) {\n            this.configurations.import(decodedAccessToken.configuration);\n        }\n\n        const user = new User(\n            decodedAccessToken.sub,\n            decodedAccessToken.name,\n            decodedAccessToken.fullname,\n            decodedAccessToken.email,\n            decodedAccessToken.jobtitle,\n            decodedAccessToken.phone_number,\n            Array.isArray(decodedAccessToken.role) ? decodedAccessToken.role : [decodedAccessToken.role]);\n        user.isEnabled = true;\n\n        this.saveUserDetails(user, permissions, accessToken, refreshToken, accessTokenExpiry, rememberMe);\n\n        this.reevaluateLoginStatus(user);\n\n        return user;\n    }\n\n    private saveUserDetails(user: User, permissions: PermissionValues[], accessToken: string, refreshToken: string, expiresIn: Date, rememberMe: boolean) {\n        if (rememberMe) {\n            this.localStorage.savePermanentData(accessToken, DBkeys.ACCESS_TOKEN);\n            this.localStorage.savePermanentData(refreshToken, DBkeys.REFRESH_TOKEN);\n            this.localStorage.savePermanentData(expiresIn, DBkeys.TOKEN_EXPIRES_IN);\n            this.localStorage.savePermanentData(permissions, DBkeys.USER_PERMISSIONS);\n            this.localStorage.savePermanentData(user, DBkeys.CURRENT_USER);\n        } else {\n            this.localStorage.saveSyncedSessionData(accessToken, DBkeys.ACCESS_TOKEN);\n            this.localStorage.saveSyncedSessionData(refreshToken, DBkeys.REFRESH_TOKEN);\n            this.localStorage.saveSyncedSessionData(expiresIn, DBkeys.TOKEN_EXPIRES_IN);\n            this.localStorage.saveSyncedSessionData(permissions, DBkeys.USER_PERMISSIONS);\n            this.localStorage.saveSyncedSessionData(user, DBkeys.CURRENT_USER);\n        }\n\n        this.localStorage.savePermanentData(rememberMe, DBkeys.REMEMBER_ME);\n    }\n\n    logout(): void {\n        this.localStorage.deleteData(DBkeys.ACCESS_TOKEN);\n        this.localStorage.deleteData(DBkeys.REFRESH_TOKEN);\n        this.localStorage.deleteData(DBkeys.TOKEN_EXPIRES_IN);\n        this.localStorage.deleteData(DBkeys.USER_PERMISSIONS);\n        this.localStorage.deleteData(DBkeys.CURRENT_USER);\n\n        this.configurations.clearLocalChanges();\n\n        this.reevaluateLoginStatus();\n    }\n\n    private reevaluateLoginStatus(currentUser?: User) {\n        const user = currentUser || this.localStorage.getDataObject<User>(DBkeys.CURRENT_USER, false);\n        const isLoggedIn = user != null;\n\n        if (this.previousIsLoggedInCheck != isLoggedIn) {\n            setTimeout(() => {\n                this._loginStatus.next(isLoggedIn);\n            });\n        }\n\n        this.previousIsLoggedInCheck = isLoggedIn;\n    }\n\n    getLoginStatusEvent(): Observable<boolean> {\n        return this._loginStatus.asObservable();\n    }\n\n    get currentUser(): User {\n\n        const user = this.localStorage.getDataObject<User>(DBkeys.CURRENT_USER, false);\n        this.reevaluateLoginStatus(user);\n\n        return user;\n    }\n\n    get userPermissions(): PermissionValues[] {\n        return this.localStorage.getDataObject<PermissionValues[]>(DBkeys.USER_PERMISSIONS, false) || [];\n    }\n\n    get accessToken(): string {\n        return this.oidcHelperService.accessToken;\n    }\n\n    get accessTokenExpiryDate(): Date {\n        return this.oidcHelperService.accessTokenExpiryDate;\n    }\n\n    get refreshToken(): string {\n        return this.oidcHelperService.refreshToken;\n    }\n\n    get isSessionExpired(): boolean {\n        return this.oidcHelperService.isSessionExpired;\n    }\n\n    get isLoggedIn(): boolean {\n        return this.currentUser != null;\n    }\n\n    get rememberMe(): boolean {\n        return this.localStorage.getDataObject<boolean>(DBkeys.REMEMBER_ME, false) == true;\n    }\n}\n","// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, NavigationExtras, CanLoad, Route } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n\n@Injectable()\nexport class AuthGuard implements CanActivate, CanActivateChild, CanLoad {\n    constructor(private authService: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n\n        const url: string = state.url;\n        return this.checkLogin(url);\n    }\n\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        return this.canActivate(route, state);\n    }\n\n    canLoad(route: Route): boolean {\n\n        const url = `/${route.path}`;\n        return this.checkLogin(url);\n    }\n\n    checkLogin(url: string): boolean {\n\n        if (this.authService.isLoggedIn) {\n            return true;\n        }\n\n        this.authService.loginRedirectUrl = url;\n        this.router.navigate(['/login']);\n\n        return false;\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { OAuthModule, OAuthStorage } from 'angular-oauth2-oidc';\n\nimport { OidcHelperService } from './services/oidc-helper.service';\nimport { AuthService } from './services/auth.service';\nimport { JwtHelper } from './services/jwt-helper';\nimport { AuthGuard } from './services/auth-guard.service';\n\n\n@NgModule({\n    declarations: [],\n    imports: [\n        OAuthModule,\n    ],\n    exports: [],\n    providers: [\n        OidcHelperService,\n        AuthService,\n        JwtHelper,\n        AuthGuard\n    ]\n})\nexport class NgxOauth2Module { }\n"]}