{"version":3,"sources":["ng://@polpware/ngx-oauth2/lib/models/user.model.ts","ng://@polpware/ngx-oauth2/lib/models/permission.model.ts","ng://@polpware/ngx-oauth2/lib/services/oidc-helper.service.ts","ng://@polpware/ngx-oauth2/lib/services/jwt-helper.ts","ng://@polpware/ngx-oauth2/lib/services/auth.service.ts","ng://@polpware/ngx-oauth2/lib/services/auth-guard.service.ts","ng://@polpware/ngx-oauth2/lib/services/endpoint-base.service.ts","ng://@polpware/ngx-oauth2/lib/ngx-oauth2.module.ts"],"names":["User","id","userName","fullName","email","jobTitle","phoneNumber","roles","this","Object","defineProperty","prototype","name","Permission","value","groupName","description","viewUsersPermission","manageUsersPermission","viewRolesPermission","manageRolesPermission","assignRolesPermission","OidcHelperService","http","oauthService","configurationServiceProvider","localStoreManagerProvider","clientId","scope","localStorage","get","configurations","baseUrl","loginWithPassword","password","_this","header","HttpHeaders","Content-Type","params","HttpParams","append","issuer","from","loadDiscoveryDocument","pipe","mergeMap","post","tokenEndpoint","headers","refreshLogin","refreshToken","getData","DBkeys","ACCESS_TOKEN","getDataObject","TOKEN_EXPIRES_IN","REFRESH_TOKEN","accessTokenExpiryDate","valueOf","Date","core","ɵɵinject","HttpClient","angularOauth2Oidc","OAuthService","ngxAppkitContractsAlpha","ConfigurationServiceAbstractProvider","LocalStoreManagerServiceAbstractProvider","factory","ɵfac","JwtHelper","urlBase64Decode","str","output","replace","length","Error","b64DecodeUnicode","decodeURIComponent","Array","map","call","atob","c","charCodeAt","toString","slice","join","decodeToken","token","parts","split","decoded","JSON","parse","getTokenExpirationDate","hasOwnProperty","date","setUTCSeconds","exp","isTokenExpired","offsetSeconds","AuthService","router","oidcHelperService","_loginStatus","Subject","initializeLoginStatus","loginUrl","homeUrl","getInitEvent","subscribe","emitLoginStatus","gotoPage","page","preserveParams","navigationExtras","queryParamsHandling","preserveFragment","navigate","gotoHomePage","redirectLoginUser","redirect","loginRedirectUrl","urlParamsAndFragment","Utilities","splitInTwo","urlAndParams","firstPart","fragment","secondPart","queryParams","getQueryParamsFromString","redirectLogoutUser","logoutRedirectUrl","redirectForLogin","redirectUrl","url","reLogin","reLoginDelegate","resp","processLoginResponse","rememberMe","logout","response","silentEvent","accessToken","access_token","refresh_token","expiresIn","expires_in","tokenExpiryDate","setSeconds","getSeconds","accessTokenExpiry","decodedAccessToken","permissions","isArray","permission","isLoggedIn","import","configuration","user","sub","fullname","jobtitle","phone_number","role","isEnabled","saveUserDetails","savePermanentData","USER_PERMISSIONS","CURRENT_USER","saveSyncedSessionData","REMEMBER_ME","deleteData","clearLocalChanges","currentUser","next","getLoginStatusEvent","asObservable","isSessionExpired","Router","AuthGuard","authService","canActivate","route","state","checkLogin","canActivateChild","canLoad","path","EndpointBase","Authorization","Accept","catchError","error","handleError","continuation","status","isRefreshingLogin","pauseTask","resumeTasks","refreshLoginError","throwError","error_description","taskPauser","switchMap","continueOp","setTimeout","complete","NgxOauth2Module","providers","imports","OAuthModule"],"mappings":"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","sourcesContent":["// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\nexport class User {\n    // Note: Using only optional constructor properties without backing store disables typescript's type checking for the type\n    constructor(id?: string, userName?: string, fullName?: string, email?: string, jobTitle?: string, phoneNumber?: string, roles?: string[]) {\n\n        this.id = id;\n        this.userName = userName;\n        this.fullName = fullName;\n        this.email = email;\n        this.jobTitle = jobTitle;\n        this.phoneNumber = phoneNumber;\n        this.roles = roles;\n    }\n\n\n    get friendlyName(): string {\n        let name = this.fullName || this.userName;\n\n        if (this.jobTitle) {\n            name = this.jobTitle + ' ' + name;\n        }\n\n        return name;\n    }\n\n\n    public id: string;\n    public userName: string;\n    public fullName: string;\n    public email: string;\n    public jobTitle: string;\n    public phoneNumber: string;\n    public isEnabled: boolean;\n    public isLockedOut: boolean;\n    public roles: string[];\n}\n","// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\nexport type PermissionNames =\n    'View Users' | 'Manage Users' |\n    'View Roles' | 'Manage Roles' | 'Assign Roles';\n\nexport type PermissionValues =\n    'users.view' | 'users.manage' |\n    'roles.view' | 'roles.manage' | 'roles.assign';\n\nexport class Permission {\n\n    public static readonly viewUsersPermission: PermissionValues = 'users.view';\n    public static readonly manageUsersPermission: PermissionValues = 'users.manage';\n\n    public static readonly viewRolesPermission: PermissionValues = 'roles.view';\n    public static readonly manageRolesPermission: PermissionValues = 'roles.manage';\n    public static readonly assignRolesPermission: PermissionValues = 'roles.assign';\n\n\n    constructor(name?: PermissionNames, value?: PermissionValues, groupName?: string, description?: string) {\n        this.name = name;\n        this.value = value;\n        this.groupName = groupName;\n        this.description = description;\n    }\n\n    public name: PermissionNames;\n    public value: PermissionValues;\n    public groupName: string;\n    public description: string;\n}\n","// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { OAuthService } from 'angular-oauth2-oidc';\n\nimport {\n    ILocalStoreManagerContract,\n    LocalStoreManagerServiceAbstractProvider,\n    IConfigurationServiceContract,\n    ConfigurationServiceAbstractProvider,\n    environment,\n    DBkeys\n} from '@polpware/ngx-appkit-contracts-alpha';\n\nimport { LoginResponse } from '../models/login-response.model';\n\n\n@Injectable()\nexport class OidcHelperService {\n\n    private get baseUrl() { return this.configurations.baseUrl; }\n    private clientId = 'quickapp_spa';\n    private scope = 'openid email phone profile offline_access roles quickapp_api';\n\n    private localStorage: ILocalStoreManagerContract;\n    private configurations: IConfigurationServiceContract;\n\n    constructor(\n        private http: HttpClient,\n        private oauthService: OAuthService,\n        configurationServiceProvider: ConfigurationServiceAbstractProvider,\n        localStoreManagerProvider: LocalStoreManagerServiceAbstractProvider) {\n\n        this.localStorage = localStoreManagerProvider.get();\n        this.configurations = configurationServiceProvider.get();\n\n        /*\n        if (environment.requireHttps !== undefined) {\n            this.oauthService.configure({\n                requireHttps: false\n            });\n        } */\n\n    }\n\n\n    loginWithPassword(userName: string, password: string) {\n        const header = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded' });\n        const params = new HttpParams()\n            .append('username', userName)\n            .append('password', password)\n            .append('client_id', this.clientId)\n            .append('grant_type', 'password')\n            .append('scope', this.scope);\n\n        this.oauthService.issuer = this.baseUrl;\n\n        return from(this.oauthService.loadDiscoveryDocument())\n            .pipe(mergeMap(() => {\n                return this.http.post<LoginResponse>(this.oauthService.tokenEndpoint, params, { headers: header });\n            }));\n    }\n\n    refreshLogin() {\n        const header = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded' });\n        const params = new HttpParams()\n            .append('refresh_token', this.refreshToken)\n            .append('client_id', this.clientId)\n            .append('grant_type', 'refresh_token');\n\n        this.oauthService.issuer = this.baseUrl;\n\n        return from(this.oauthService.loadDiscoveryDocument())\n            .pipe(mergeMap(() => {\n                return this.http.post<LoginResponse>(this.oauthService.tokenEndpoint, params, { headers: header });\n            }));\n    }\n\n    get accessToken(): string {\n        return this.localStorage.getData(DBkeys.ACCESS_TOKEN);\n    }\n\n    get accessTokenExpiryDate(): Date {\n        return this.localStorage.getDataObject<Date>(DBkeys.TOKEN_EXPIRES_IN, true);\n    }\n\n    get refreshToken(): string {\n        return this.localStorage.getData(DBkeys.REFRESH_TOKEN);\n    }\n\n    get isSessionExpired(): boolean {\n        if (this.accessTokenExpiryDate == null) {\n            return true;\n        }\n\n        return this.accessTokenExpiryDate.valueOf() <= new Date().valueOf();\n    }\n}\n","// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\n/**\n * Helper class to decode and find JWT expiration.\n */\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class JwtHelper {\n\n    public urlBase64Decode(str: string): string {\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\n        switch (output.length % 4) {\n            case 0: { break; }\n            case 2: { output += '=='; break; }\n            case 3: { output += '='; break; }\n            default: {\n                throw new Error('Illegal base64url string!');\n            }\n        }\n        return this.b64DecodeUnicode(output);\n    }\n\n    // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n    private b64DecodeUnicode(str: any) {\n        return decodeURIComponent(Array.prototype.map.call(atob(str), (c: any) => {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    public decodeToken(token: string): any {\n        const parts = token.split('.');\n\n        if (parts.length !== 3) {\n            throw new Error('JWT must have 3 parts');\n        }\n\n        const decoded = this.urlBase64Decode(parts[1]);\n        if (!decoded) {\n            throw new Error('Cannot decode the token');\n        }\n\n        return JSON.parse(decoded);\n    }\n\n    public getTokenExpirationDate(token: string): Date {\n        let decoded: any;\n        decoded = this.decodeToken(token);\n\n        if (!decoded.hasOwnProperty('exp')) {\n            return null;\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(decoded.exp);\n\n        return date;\n    }\n\n    public isTokenExpired(token: string, offsetSeconds?: number): boolean {\n        const date = this.getTokenExpirationDate(token);\n        offsetSeconds = offsetSeconds || 0;\n\n        if (date == null) {\n            return false;\n        }\n\n        // Token expired?\n        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\n    }\n}\n","// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\nimport { Injectable } from '@angular/core';\nimport { Router, NavigationExtras } from '@angular/router';\nimport { Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n    ILocalStoreManagerContract,\n    LocalStoreManagerServiceAbstractProvider,\n    IConfigurationServiceContract,\n    ConfigurationServiceAbstractProvider,\n    Utilities,\n    DBkeys,\n    ConfigurationServiceConstants\n} from '@polpware/ngx-appkit-contracts-alpha';\n\nimport { OidcHelperService } from './oidc-helper.service';\nimport { JwtHelper } from './jwt-helper';\nimport { AccessToken, LoginResponse } from '../models/login-response.model';\nimport { User } from '../models/user.model';\nimport { PermissionValues } from '../models/permission.model';\n\n@Injectable()\nexport class AuthService {\n    public get loginUrl() { return this.configurations.loginUrl; }\n    public get homeUrl() { return this.configurations.homeUrl; }\n\n    public loginRedirectUrl: string;\n    public logoutRedirectUrl: string;\n\n    public reLoginDelegate: () => void;\n\n    private _loginStatus = new Subject<boolean>();\n\n    private localStorage: ILocalStoreManagerContract;\n    private configurations: IConfigurationServiceContract;\n\n    constructor(\n        private router: Router,\n        private oidcHelperService: OidcHelperService,\n        configurationServiceProvider: ConfigurationServiceAbstractProvider,\n        localStoreManagerProvider: LocalStoreManagerServiceAbstractProvider) {\n\n        this.localStorage = localStoreManagerProvider.get();\n        this.configurations = configurationServiceProvider.get();\n\n        this.initializeLoginStatus();\n    }\n\n    private initializeLoginStatus() {\n        this.localStorage.getInitEvent().subscribe(() => {\n            this.emitLoginStatus();\n        });\n    }\n\n    gotoPage(page: string, preserveParams = true) {\n\n        const navigationExtras: NavigationExtras = {\n            queryParamsHandling: preserveParams ? 'merge' : '', preserveFragment: preserveParams\n        };\n\n        this.router.navigate([page], navigationExtras);\n    }\n\n    gotoHomePage() {\n        this.router.navigate([this.homeUrl]);\n    }\n\n    redirectLoginUser() {\n\n        const redirect = (this.loginRedirectUrl &&\n            (this.loginRedirectUrl != '/') &&\n            (this.loginRedirectUrl != this.loginUrl)) ? this.loginRedirectUrl : this.homeUrl;\n        this.loginRedirectUrl = null;\n\n        const urlParamsAndFragment = Utilities.splitInTwo(redirect, '#');\n        const urlAndParams = Utilities.splitInTwo(urlParamsAndFragment.firstPart, '?');\n\n        const navigationExtras: NavigationExtras = {\n            fragment: urlParamsAndFragment.secondPart,\n            queryParams: Utilities.getQueryParamsFromString(urlAndParams.secondPart),\n            queryParamsHandling: 'merge'\n        };\n\n        this.router.navigate([urlAndParams.firstPart], navigationExtras);\n    }\n\n    redirectLogoutUser() {\n        const redirect = this.logoutRedirectUrl ? this.logoutRedirectUrl : this.loginUrl;\n        this.logoutRedirectUrl = null;\n\n        this.router.navigate([redirect]);\n    }\n\n    redirectForLogin(redirectUrl?: string) {\n        if (redirectUrl) {\n            this.loginRedirectUrl = redirectUrl;\n        } else {\n            this.loginRedirectUrl = this.router.url;\n        }\n        this.router.navigate([this.loginUrl]);\n    }\n\n    reLogin() {\n        if (this.reLoginDelegate) {\n            this.reLoginDelegate();\n        } else {\n            this.redirectForLogin();\n        }\n    }\n\n    // Will not change the status that we have \n    refreshLogin() {\n        return this.oidcHelperService.refreshLogin()\n            .pipe(map(resp => this.processLoginResponse(resp, this.rememberMe, true)));\n    }\n\n    loginWithPassword(userName: string, password: string, rememberMe?: boolean) {\n        // Clean what we have before, without emitting any event. \n        this.logout(true);\n\n        return this.oidcHelperService.loginWithPassword(userName, password)\n            .pipe(map(resp => this.processLoginResponse(resp, rememberMe)));\n    }\n\n    // Silent event in case.\n    private processLoginResponse(response: LoginResponse, rememberMe: boolean, silentEvent?: boolean) {\n        const accessToken = response.access_token;\n\n        if (accessToken == null) {\n            throw new Error('accessToken cannot be null');\n        }\n\n        rememberMe = rememberMe || this.rememberMe;\n\n        const refreshToken = response.refresh_token || this.refreshToken;\n        const expiresIn = response.expires_in;\n        const tokenExpiryDate = new Date();\n        tokenExpiryDate.setSeconds(tokenExpiryDate.getSeconds() + expiresIn);\n        const accessTokenExpiry = tokenExpiryDate;\n        const jwtHelper = new JwtHelper();\n        const decodedAccessToken = jwtHelper.decodeToken(accessToken) as AccessToken;\n\n        const permissions: PermissionValues[] = Array.isArray(decodedAccessToken.permission) ? decodedAccessToken.permission : [decodedAccessToken.permission];\n\n        if (!this.isLoggedIn) {\n            this.configurations.import(decodedAccessToken.configuration);\n        }\n\n        const user = new User(\n            decodedAccessToken.sub,\n            decodedAccessToken.name,\n            decodedAccessToken.fullname,\n            decodedAccessToken.email,\n            decodedAccessToken.jobtitle,\n            decodedAccessToken.phone_number,\n            Array.isArray(decodedAccessToken.role) ? decodedAccessToken.role : [decodedAccessToken.role]);\n        user.isEnabled = true;\n\n        this.saveUserDetails(user, permissions, accessToken, refreshToken, accessTokenExpiry, rememberMe);\n\n        if (silentEvent !== true) {\n            this.emitLoginStatus(user);\n        }\n\n        return user;\n    }\n\n    private saveUserDetails(user: User, permissions: PermissionValues[], accessToken: string, refreshToken: string, expiresIn: Date, rememberMe: boolean) {\n        if (rememberMe) {\n            this.localStorage.savePermanentData(accessToken, DBkeys.ACCESS_TOKEN);\n            this.localStorage.savePermanentData(refreshToken, DBkeys.REFRESH_TOKEN);\n            this.localStorage.savePermanentData(expiresIn, DBkeys.TOKEN_EXPIRES_IN);\n            this.localStorage.savePermanentData(permissions, DBkeys.USER_PERMISSIONS);\n            this.localStorage.savePermanentData(user, DBkeys.CURRENT_USER);\n        } else {\n            this.localStorage.saveSyncedSessionData(accessToken, DBkeys.ACCESS_TOKEN);\n            this.localStorage.saveSyncedSessionData(refreshToken, DBkeys.REFRESH_TOKEN);\n            this.localStorage.saveSyncedSessionData(expiresIn, DBkeys.TOKEN_EXPIRES_IN);\n            this.localStorage.saveSyncedSessionData(permissions, DBkeys.USER_PERMISSIONS);\n            this.localStorage.saveSyncedSessionData(user, DBkeys.CURRENT_USER);\n        }\n\n        this.localStorage.savePermanentData(rememberMe, DBkeys.REMEMBER_ME);\n    }\n\n    // Silient event in case.\n    logout(silentEvent?: boolean): void {\n        this.localStorage.deleteData(DBkeys.ACCESS_TOKEN);\n        this.localStorage.deleteData(DBkeys.REFRESH_TOKEN);\n        this.localStorage.deleteData(DBkeys.TOKEN_EXPIRES_IN);\n        this.localStorage.deleteData(DBkeys.USER_PERMISSIONS);\n        this.localStorage.deleteData(DBkeys.CURRENT_USER);\n\n        this.configurations.clearLocalChanges();\n\n        if (silentEvent !== true) {\n            this.emitLoginStatus();\n        }\n    }\n\n    private emitLoginStatus(currentUser?: User) {\n        const user = currentUser || this.localStorage.getDataObject<User>(DBkeys.CURRENT_USER, false);\n        const isLoggedIn = user != null;\n        this._loginStatus.next(isLoggedIn);\n    }\n\n    getLoginStatusEvent(): Observable<boolean> {\n        return this._loginStatus.asObservable();\n    }\n\n    get currentUser(): User {\n        const user = this.localStorage.getDataObject<User>(DBkeys.CURRENT_USER, false);\n        return user;\n    }\n\n    get userPermissions(): PermissionValues[] {\n        return this.localStorage.getDataObject<PermissionValues[]>(DBkeys.USER_PERMISSIONS, false) || [];\n    }\n\n    get accessToken(): string {\n        return this.oidcHelperService.accessToken;\n    }\n\n    get accessTokenExpiryDate(): Date {\n        return this.oidcHelperService.accessTokenExpiryDate;\n    }\n\n    get refreshToken(): string {\n        return this.oidcHelperService.refreshToken;\n    }\n\n    get isSessionExpired(): boolean {\n        return this.oidcHelperService.isSessionExpired;\n    }\n\n    get isLoggedIn(): boolean {\n        return this.currentUser != null;\n    }\n\n    get rememberMe(): boolean {\n        return this.localStorage.getDataObject<boolean>(DBkeys.REMEMBER_ME, false) == true;\n    }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, NavigationExtras, CanLoad, Route } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n\n@Injectable()\nexport class AuthGuard implements CanActivate, CanActivateChild, CanLoad {\n    constructor(private authService: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n\n        const url: string = state.url;\n        return this.checkLogin(url);\n    }\n\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        return this.canActivate(route, state);\n    }\n\n    canLoad(route: Route): boolean {\n\n        const url = `/${route.path}`;\n        return this.checkLogin(url);\n    }\n\n    checkLogin(url: string): boolean {\n\n        if (this.authService.isLoggedIn) {\n            return true;\n        }\n\n        this.authService.loginRedirectUrl = url;\n        this.router.navigate(['/login']);\n\n        return false;\n    }\n}\n","// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, Subject, from, throwError } from 'rxjs';\nimport { mergeMap, switchMap, catchError } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\n\nexport class EndpointBase {\n\n    private taskPauser: Subject<any>;\n    private isRefreshingLogin: boolean;\n\n    constructor(\n        protected http: HttpClient,\n        private authService: AuthService) {\n\n    }\n\n    protected get requestHeaders(): { headers: HttpHeaders | { [header: string]: string | string[]; } } {\n        const headers = new HttpHeaders({\n            Authorization: 'Bearer ' + this.authService.accessToken,\n            'Content-Type': 'application/json',\n            Accept: 'application/json, text/plain, */*'\n        });\n\n        return { headers };\n    }\n\n    public refreshLogin() {\n        return this.authService.refreshLogin().pipe(\n            catchError(error => {\n                return this.handleError(error, () => this.refreshLogin());\n            }));\n    }\n\n    protected handleError(error, continuation: () => Observable<any>) {\n        if (error.status == 401) {\n            if (this.isRefreshingLogin) {\n                return this.pauseTask(continuation);\n            }\n\n            this.isRefreshingLogin = true;\n\n            return from(this.authService.refreshLogin()).pipe(\n                mergeMap(() => {\n                    this.isRefreshingLogin = false;\n                    this.resumeTasks(true);\n\n                    return continuation();\n                }),\n                catchError(refreshLoginError => {\n                    this.isRefreshingLogin = false;\n                    this.resumeTasks(false);\n                    this.authService.reLogin();\n\n                    if (refreshLoginError.status == 401 || (refreshLoginError.error && refreshLoginError.error.error == 'invalid_grant')) {\n                        return throwError('session expired');\n                    } else {\n                        return throwError(`unknown refresh error (${refreshLoginError || 'server error'})`);\n                    }\n                }));\n        }\n\n        if (error.error && error.error.error == 'invalid_grant') {\n            this.authService.reLogin();\n\n            return throwError((error.error && error.error.error_description) ? `session expired (${error.error.error_description})` : 'session expired');\n        } else {\n            return throwError(error);\n        }\n    }\n\n\n\n    private pauseTask(continuation: () => Observable<any>) {\n        if (!this.taskPauser) {\n            this.taskPauser = new Subject();\n        }\n\n        return this.taskPauser.pipe(switchMap(continueOp => {\n            return continueOp ? continuation() : throwError('session expired');\n        }));\n    }\n\n\n    private resumeTasks(continueOp: boolean) {\n        setTimeout(() => {\n            if (this.taskPauser) {\n                this.taskPauser.next(continueOp);\n                this.taskPauser.complete();\n                this.taskPauser = null;\n            }\n        });\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { OAuthModule, OAuthStorage } from 'angular-oauth2-oidc';\n\nimport { OidcHelperService } from './services/oidc-helper.service';\nimport { AuthService } from './services/auth.service';\nimport { JwtHelper } from './services/jwt-helper';\nimport { AuthGuard } from './services/auth-guard.service';\n\n\n@NgModule({\n    declarations: [],\n    imports: [\n        OAuthModule,\n    ],\n    exports: [],\n    providers: [\n        OidcHelperService,\n        AuthService,\n        JwtHelper,\n        AuthGuard\n    ]\n})\nexport class NgxOauth2Module { }\n"]}