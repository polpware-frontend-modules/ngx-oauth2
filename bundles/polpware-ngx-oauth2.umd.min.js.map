{"version":3,"sources":["ng://@polpware/ngx-oauth2/lib/models/user.model.ts","ng://@polpware/ngx-oauth2/lib/models/permission.model.ts","ng://@polpware/ngx-oauth2/lib/services/oidc-helper.service.ts","ng://@polpware/ngx-oauth2/lib/services/jwt-helper.ts","ng://@polpware/ngx-oauth2/lib/services/auth.service.ts","ng://@polpware/ngx-oauth2/lib/services/auth-guard.service.ts","ng://@polpware/ngx-oauth2/lib/services/endpoint-base.service.ts","ng://@polpware/ngx-oauth2/lib/services/non-auth.guard.ts","ng://@polpware/ngx-oauth2/lib/ngx-oauth2.module.ts"],"names":["User","id","userName","fullName","email","jobTitle","phoneNumber","roles","this","Object","defineProperty","prototype","name","Permission","value","groupName","description","viewUsersPermission","manageUsersPermission","viewRolesPermission","manageRolesPermission","assignRolesPermission","OidcHelperService","http","oauthService","configurationServiceProvider","localStoreManagerProvider","clientId","scope","localStorage","get","configurations","baseUrl","loginWithPassword","password","_this","header","HttpHeaders","Content-Type","params","HttpParams","append","issuer","from","loadDiscoveryDocument","pipe","mergeMap","post","tokenEndpoint","headers","refreshLogin","refreshToken","getData","DBkeys","ACCESS_TOKEN","getDataObject","TOKEN_EXPIRES_IN","REFRESH_TOKEN","accessTokenExpiryDate","valueOf","Date","core","ɵɵinject","HttpClient","angularOauth2Oidc","OAuthService","ngxAppkitContractsAlpha","ConfigurationServiceAbstractProvider","LocalStoreManagerServiceAbstractProvider","factory","ɵfac","providedIn","JwtHelper","urlBase64Decode","str","output","replace","length","Error","b64DecodeUnicode","decodeURIComponent","Array","map","call","atob","c","charCodeAt","toString","slice","join","decodeToken","token","parts","split","decoded","JSON","parse","getTokenExpirationDate","hasOwnProperty","date","setUTCSeconds","exp","isTokenExpired","offsetSeconds","AuthService","router","oidcHelperService","_logger","_loginStatus","Subject","initializeLoginStatus","loginUrl","homeUrl","getInitEvent","subscribe","emitLoginStatus","gotoPage","page","preserveParams","navigationExtras","queryParamsHandling","preserveFragment","navigate","gotoHomePage","redirectLoginUser","ignoreQueryParams","debug","loginRedirectUrl","redirect","urlParamsAndFragment","Utilities","splitInTwo","urlAndParams","firstPart","fragment","secondPart","assign","queryParams","getQueryParamsFromString","redirectLogoutUser","logoutRedirectUrl","redirectForLogin","redirectUrl","url","prepareLoginUrl","parseUrl","reLogin","reLoginDelegate","resp","processLoginResponse","rememberMe","logout","loginWithToken","accessToken","expiresIn","tokenExpiryDate","setSeconds","getSeconds","accessTokenExpiry","decodedAccessToken","permissions","isArray","permission","isLoggedIn","import","configuration","user","sub","fullname","jobtitle","phone_number","role","isEnabled","saveUserDetails","response","silentEvent","access_token","refresh_token","expires_in","savePermanentData","USER_PERMISSIONS","CURRENT_USER","saveSyncedSessionData","REMEMBER_ME","deleteData","clearLocalChanges","currentUser","next","getLoginStatusEvent","asObservable","isSessionExpired","Router","ngxLogger","NgxLoggerImpl","AuthGuard","_authService","canActivate","route","state","checkLogin","canActivateChild","canLoad","path","EndpointBase","authService","catchError","error","handleError","Authorization","Accept","continuation","status","isRefreshingLogin","pauseTask","resumeTasks","refreshLoginError","throwError","error_description","taskPauser","switchMap","continueOp","setTimeout","complete","NonAuthGuard","checkNonLogin","NgxOauth2Module","providers","imports","OAuthModule"],"mappings":"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","sourcesContent":["export class User {\n    // Note: Using only optional constructor properties without backing store disables typescript's type checking for the type\n    constructor(id?: string,\n        userName?: string,\n        fullName?: string,\n        email?: string,\n        jobTitle?: string,\n        phoneNumber?: string,\n        roles?: string[]) {\n\n        this.id = id;\n        this.userName = userName;\n        this.fullName = fullName;\n        this.email = email;\n        this.jobTitle = jobTitle;\n        this.phoneNumber = phoneNumber;\n        this.roles = roles;\n    }\n\n\n    get friendlyName(): string {\n        let name = this.fullName || this.userName;\n\n        if (this.jobTitle) {\n            name = this.jobTitle + ' ' + name;\n        }\n\n        return name;\n    }\n\n\n    public id: string;\n    public userName: string;\n    public fullName: string;\n    public email: string;\n    public jobTitle: string;\n    public phoneNumber: string;\n    public isEnabled: boolean;\n    public isLockedOut: boolean;\n    public roles: string[];\n}\n","// =============================\n// Email: info@ebenmonney.com\n// www.ebenmonney.com/templates\n// =============================\n\nexport type PermissionNames =\n    'View Users' | 'Manage Users' |\n    'View Roles' | 'Manage Roles' | 'Assign Roles';\n\nexport type PermissionValues =\n    'users.view' | 'users.manage' |\n    'roles.view' | 'roles.manage' | 'roles.assign';\n\nexport class Permission {\n\n    public static readonly viewUsersPermission: PermissionValues = 'users.view';\n    public static readonly manageUsersPermission: PermissionValues = 'users.manage';\n\n    public static readonly viewRolesPermission: PermissionValues = 'roles.view';\n    public static readonly manageRolesPermission: PermissionValues = 'roles.manage';\n    public static readonly assignRolesPermission: PermissionValues = 'roles.assign';\n\n\n    constructor(name?: PermissionNames, value?: PermissionValues, groupName?: string, description?: string) {\n        this.name = name;\n        this.value = value;\n        this.groupName = groupName;\n        this.description = description;\n    }\n\n    public name: PermissionNames;\n    public value: PermissionValues;\n    public groupName: string;\n    public description: string;\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n    ConfigurationServiceAbstractProvider,\n    DBkeys, IConfigurationServiceContract,\n    ILocalStoreManagerContract,\n    LocalStoreManagerServiceAbstractProvider\n} from '@polpware/ngx-appkit-contracts-alpha';\nimport { OAuthService } from 'angular-oauth2-oidc';\nimport { from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { LoginResponse } from '../models/login-response.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class OidcHelperService {\n\n    private get baseUrl() { return this.configurations.baseUrl; }\n    private clientId = 'quickapp_spa';\n    private scope = 'openid email phone profile offline_access roles quickapp_api';\n\n    private localStorage: ILocalStoreManagerContract;\n    private configurations: IConfigurationServiceContract;\n\n    constructor(\n        private http: HttpClient,\n        private oauthService: OAuthService,\n        configurationServiceProvider: ConfigurationServiceAbstractProvider,\n        localStoreManagerProvider: LocalStoreManagerServiceAbstractProvider) {\n\n        this.localStorage = localStoreManagerProvider.get();\n        this.configurations = configurationServiceProvider.get();\n\n        /*\n        if (environment.requireHttps !== undefined) {\n            this.oauthService.configure({\n                requireHttps: false\n            });\n        } */\n\n    }\n\n    loginWithPassword(userName: string, password: string) {\n        const header = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded' });\n        const params = new HttpParams()\n            .append('username', userName)\n            .append('password', password)\n            .append('client_id', this.clientId)\n            .append('grant_type', 'password')\n            .append('scope', this.scope);\n\n        this.oauthService.issuer = this.baseUrl;\n\n        return from(this.oauthService.loadDiscoveryDocument())\n            .pipe(mergeMap(() => {\n                return this.http.post<LoginResponse>(this.oauthService.tokenEndpoint, params, { headers: header });\n            }));\n    }\n\n    refreshLogin() {\n        const header = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded' });\n        const params = new HttpParams()\n            .append('refresh_token', this.refreshToken)\n            .append('client_id', this.clientId)\n            .append('grant_type', 'refresh_token');\n\n        this.oauthService.issuer = this.baseUrl;\n\n        return from(this.oauthService.loadDiscoveryDocument())\n            .pipe(mergeMap(() => {\n                return this.http.post<LoginResponse>(this.oauthService.tokenEndpoint, params, { headers: header });\n            }));\n    }\n\n    get accessToken(): string {\n        return this.localStorage.getData(DBkeys.ACCESS_TOKEN);\n    }\n\n    get accessTokenExpiryDate(): Date {\n        return this.localStorage.getDataObject<Date>(DBkeys.TOKEN_EXPIRES_IN, true);\n    }\n\n    get refreshToken(): string {\n        return this.localStorage.getData(DBkeys.REFRESH_TOKEN);\n    }\n\n    get isSessionExpired(): boolean {\n        if (this.accessTokenExpiryDate == null) {\n            return true;\n        }\n\n        return this.accessTokenExpiryDate.valueOf() <= new Date().valueOf();\n    }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Helper class to decode and find JWT expiration.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class JwtHelper {\n\n    public urlBase64Decode(str: string): string {\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\n        switch (output.length % 4) {\n            case 0: { break; }\n            case 2: { output += '=='; break; }\n            case 3: { output += '='; break; }\n            default: {\n                throw new Error('Illegal base64url string!');\n            }\n        }\n        return this.b64DecodeUnicode(output);\n    }\n\n    // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n    private b64DecodeUnicode(str: any) {\n        return decodeURIComponent(Array.prototype.map.call(atob(str), (c: any) => {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    public decodeToken(token: string): any {\n        const parts = token.split('.');\n\n        if (parts.length !== 3) {\n            throw new Error('JWT must have 3 parts');\n        }\n\n        const decoded = this.urlBase64Decode(parts[1]);\n        if (!decoded) {\n            throw new Error('Cannot decode the token');\n        }\n\n        return JSON.parse(decoded);\n    }\n\n    public getTokenExpirationDate(token: string): Date {\n        let decoded: any;\n        decoded = this.decodeToken(token);\n\n        if (!decoded.hasOwnProperty('exp')) {\n            return null;\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(decoded.exp);\n\n        return date;\n    }\n\n    public isTokenExpired(token: string, offsetSeconds?: number): boolean {\n        const date = this.getTokenExpirationDate(token);\n        offsetSeconds = offsetSeconds || 0;\n\n        if (date == null) {\n            return false;\n        }\n\n        // Token expired?\n        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras, Router } from '@angular/router';\nimport {\n    ConfigurationServiceAbstractProvider,\n    DBkeys,\n    IConfigurationServiceContract,\n    ILocalStoreManagerContract,\n    LocalStoreManagerServiceAbstractProvider,\n    Utilities\n} from '@polpware/ngx-appkit-contracts-alpha';\nimport { NgxLoggerImpl } from '@polpware/ngx-logger';\nimport { Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AccessToken, LoginResponse } from '../models/login-response.model';\nimport { PermissionValues } from '../models/permission.model';\nimport { User } from '../models/user.model';\nimport { JwtHelper } from './jwt-helper';\nimport { OidcHelperService } from './oidc-helper.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    public get loginUrl() { return this.configurations.loginUrl; }\n    public get homeUrl() { return this.configurations.homeUrl; }\n\n    /**\n     * Tracks the the url a user attempts to access but \n     * cannot be authenticated. \n     */\n    public loginRedirectUrl: string;\n\n    public logoutRedirectUrl: string;\n\n    public reLoginDelegate: () => void;\n\n    private _loginStatus = new Subject<boolean>();\n\n    private localStorage: ILocalStoreManagerContract;\n    private configurations: IConfigurationServiceContract;\n\n    constructor(\n        private router: Router,\n        private oidcHelperService: OidcHelperService,\n        private readonly _logger: NgxLoggerImpl,\n        configurationServiceProvider: ConfigurationServiceAbstractProvider,\n        localStoreManagerProvider: LocalStoreManagerServiceAbstractProvider) {\n\n        this.localStorage = localStoreManagerProvider.get();\n        this.configurations = configurationServiceProvider.get();\n\n        this.initializeLoginStatus();\n    }\n\n    private initializeLoginStatus() {\n        this.localStorage.getInitEvent().subscribe(() => {\n            this.emitLoginStatus();\n        });\n    }\n\n    gotoPage(page: string, preserveParams = true) {\n\n        const navigationExtras: NavigationExtras = {\n            queryParamsHandling: preserveParams ? 'merge' : '', preserveFragment: preserveParams\n        };\n\n        this.router.navigate([page], navigationExtras);\n    }\n\n    gotoHomePage() {\n        this.router.navigate([this.homeUrl]);\n    }\n\n    redirectLoginUser(ignoreQueryParams?: boolean) {\n\n        this._logger.debug(`login redirect url is: ${this.loginRedirectUrl}`);\n        this._logger.debug(`home url is: ${this.homeUrl}`);\n\n        const redirect = (this.loginRedirectUrl &&\n            (this.loginRedirectUrl != '/') &&\n            (this.loginRedirectUrl != this.loginUrl)) ? this.loginRedirectUrl : this.homeUrl;\n        this.loginRedirectUrl = null;\n\n        this._logger.debug(`final redirect url is: ${redirect}`);\n\n        const urlParamsAndFragment = Utilities.splitInTwo(redirect, '#');\n        const urlAndParams = Utilities.splitInTwo(urlParamsAndFragment.firstPart, '?');\n\n        const navigationExtras: NavigationExtras = {\n            fragment: urlParamsAndFragment.secondPart\n        };\n\n        if (!ignoreQueryParams) {\n            Object.assign(navigationExtras, {\n                queryParams: Utilities.getQueryParamsFromString(urlAndParams.secondPart),\n                queryParamsHandling: 'merge'\n            });\n        }\n\n        this._logger.debug(`Redirection url is: ${urlAndParams.firstPart}`);\n        this._logger.debug('Extra parameters: ');\n        this._logger.debug(navigationExtras);\n\n        this.router.navigate([urlAndParams.firstPart], navigationExtras);\n    }\n\n    redirectLogoutUser() {\n        const redirect = this.logoutRedirectUrl ? this.logoutRedirectUrl : this.loginUrl;\n        this.logoutRedirectUrl = null;\n\n        this.router.navigate([redirect]);\n    }\n\n    redirectForLogin(redirectUrl?: string) {\n        if (redirectUrl) {\n            this.loginRedirectUrl = redirectUrl;\n        } else {\n            this.loginRedirectUrl = this.router.url;\n        }\n        this.router.navigate([this.loginUrl]);\n    }\n\n    // todo: Is this useful????\n    /**\n     * Prepare the login URL,\n     * including setting up the right redirect url.\n     * @param redirectUrl Redirect url.\n     */\n    prepareLoginUrl(redirectUrl?: string) {\n        if (redirectUrl) {\n            this.loginRedirectUrl = redirectUrl;\n        } else {\n            this.loginRedirectUrl = this.router.url;\n        }\n\n        return this.router.parseUrl(this.loginUrl);\n    }\n\n    reLogin() {\n\n        if (this.reLoginDelegate) {\n            this.reLoginDelegate();\n        } else {\n            this.redirectForLogin();\n        }\n    }\n\n    // Will not change the status that we have \n    refreshLogin() {\n        return this.oidcHelperService.refreshLogin()\n            .pipe(map(resp => this.processLoginResponse(resp, this.rememberMe, true)));\n    }\n\n    loginWithPassword(userName: string, password: string, rememberMe?: boolean) {\n        // Clean what we have before, without emitting any event. \n        this.logout(true);\n\n        return this.oidcHelperService.loginWithPassword(userName, password)\n            .pipe(map(resp => this.processLoginResponse(resp, rememberMe)));\n    }\n\n\n    loginWithToken(accessToken: string, refreshToken?: string, expiresIn?: number) {\n        refreshToken = refreshToken || '';\n        expiresIn = 24 * 60 * 60 * 1000;\n        const tokenExpiryDate = new Date();\n        tokenExpiryDate.setSeconds(tokenExpiryDate.getSeconds() + expiresIn);\n        const accessTokenExpiry = tokenExpiryDate;\n        const jwtHelper = new JwtHelper();\n        const decodedAccessToken = jwtHelper.decodeToken(accessToken) as AccessToken;\n\n        const permissions: PermissionValues[] = Array.isArray(decodedAccessToken.permission) ? decodedAccessToken.permission : [decodedAccessToken.permission];\n\n        if (!this.isLoggedIn) {\n            this.configurations.import(decodedAccessToken.configuration);\n        }\n\n        const user = new User(\n            decodedAccessToken.sub,\n            decodedAccessToken.name,\n            decodedAccessToken.fullname,\n            decodedAccessToken.email,\n            decodedAccessToken.jobtitle,\n            decodedAccessToken.phone_number,\n            Array.isArray(decodedAccessToken.role) ? decodedAccessToken.role : [decodedAccessToken.role]);\n        user.isEnabled = true;\n\n        this.saveUserDetails(user, permissions, accessToken, refreshToken, accessTokenExpiry, false);\n\n        // todo: Do we need to emit events?\n\n        return user;\n    }\n\n    // Silent event in case.\n    private processLoginResponse(response: LoginResponse, rememberMe: boolean, silentEvent?: boolean) {\n        const accessToken = response.access_token;\n\n        if (accessToken == null) {\n            throw new Error('accessToken cannot be null');\n        }\n\n        rememberMe = rememberMe || this.rememberMe;\n\n        const refreshToken = response.refresh_token || this.refreshToken;\n        const expiresIn = response.expires_in;\n        const tokenExpiryDate = new Date();\n        tokenExpiryDate.setSeconds(tokenExpiryDate.getSeconds() + expiresIn);\n        const accessTokenExpiry = tokenExpiryDate;\n        const jwtHelper = new JwtHelper();\n        const decodedAccessToken = jwtHelper.decodeToken(accessToken) as AccessToken;\n\n        const permissions: PermissionValues[] = Array.isArray(decodedAccessToken.permission) ? decodedAccessToken.permission : [decodedAccessToken.permission];\n\n        if (!this.isLoggedIn) {\n            this.configurations.import(decodedAccessToken.configuration);\n        }\n\n        const user = new User(\n            decodedAccessToken.sub,\n            decodedAccessToken.name,\n            decodedAccessToken.fullname,\n            decodedAccessToken.email,\n            decodedAccessToken.jobtitle,\n            decodedAccessToken.phone_number,\n            Array.isArray(decodedAccessToken.role) ? decodedAccessToken.role : [decodedAccessToken.role]);\n        user.isEnabled = true;\n\n        this.saveUserDetails(user, permissions, accessToken, refreshToken, accessTokenExpiry, rememberMe);\n\n        if (silentEvent !== true) {\n            this.emitLoginStatus(user);\n        }\n\n        return user;\n    }\n\n    private saveUserDetails(user: User, permissions: PermissionValues[], accessToken: string, refreshToken: string, expiresIn: Date, rememberMe: boolean) {\n        if (rememberMe) {\n            this.localStorage.savePermanentData(accessToken, DBkeys.ACCESS_TOKEN);\n            this.localStorage.savePermanentData(refreshToken, DBkeys.REFRESH_TOKEN);\n            this.localStorage.savePermanentData(expiresIn, DBkeys.TOKEN_EXPIRES_IN);\n            this.localStorage.savePermanentData(permissions, DBkeys.USER_PERMISSIONS);\n            this.localStorage.savePermanentData(user, DBkeys.CURRENT_USER);\n        } else {\n            this.localStorage.saveSyncedSessionData(accessToken, DBkeys.ACCESS_TOKEN);\n            this.localStorage.saveSyncedSessionData(refreshToken, DBkeys.REFRESH_TOKEN);\n            this.localStorage.saveSyncedSessionData(expiresIn, DBkeys.TOKEN_EXPIRES_IN);\n            this.localStorage.saveSyncedSessionData(permissions, DBkeys.USER_PERMISSIONS);\n            this.localStorage.saveSyncedSessionData(user, DBkeys.CURRENT_USER);\n        }\n\n        this.localStorage.savePermanentData(rememberMe, DBkeys.REMEMBER_ME);\n    }\n\n    // Silient event in case.\n    logout(silentEvent?: boolean): void {\n        this.localStorage.deleteData(DBkeys.ACCESS_TOKEN);\n        this.localStorage.deleteData(DBkeys.REFRESH_TOKEN);\n        this.localStorage.deleteData(DBkeys.TOKEN_EXPIRES_IN);\n        this.localStorage.deleteData(DBkeys.USER_PERMISSIONS);\n        this.localStorage.deleteData(DBkeys.CURRENT_USER);\n\n        this.configurations.clearLocalChanges();\n\n        if (silentEvent !== true) {\n            this.emitLoginStatus();\n        }\n    }\n\n    private emitLoginStatus(currentUser?: User) {\n        const user = currentUser || this.localStorage.getDataObject<User>(DBkeys.CURRENT_USER, false);\n        const isLoggedIn = user != null;\n        this._loginStatus.next(isLoggedIn);\n    }\n\n    getLoginStatusEvent(): Observable<boolean> {\n        return this._loginStatus.asObservable();\n    }\n\n    get currentUser(): User {\n        const user = this.localStorage.getDataObject<User>(DBkeys.CURRENT_USER, false);\n        return user;\n    }\n\n    get userPermissions(): PermissionValues[] {\n        return this.localStorage.getDataObject<PermissionValues[]>(DBkeys.USER_PERMISSIONS, false) || [];\n    }\n\n    get accessToken(): string {\n        return this.oidcHelperService.accessToken;\n    }\n\n    get accessTokenExpiryDate(): Date {\n        return this.oidcHelperService.accessTokenExpiryDate;\n    }\n\n    get refreshToken(): string {\n        return this.oidcHelperService.refreshToken;\n    }\n\n    get isSessionExpired(): boolean {\n        return this.oidcHelperService.isSessionExpired;\n    }\n\n    get isLoggedIn(): boolean {\n        return this.currentUser != null;\n    }\n\n    get rememberMe(): boolean {\n        return this.localStorage.getDataObject<boolean>(DBkeys.REMEMBER_ME, false) == true;\n    }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Route, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate, CanActivateChild, CanLoad {\n\n    constructor(private readonly _authService: AuthService) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n\n        const url: string = state.url;\n        return this.checkLogin(url);\n    }\n\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        return this.canActivate(route, state);\n    }\n\n    canLoad(route: Route): boolean {\n\n        const url = `/${route.path}`;\n        return this.checkLogin(url);\n    }\n\n    checkLogin(url: string): boolean {\n\n        if (this._authService.isLoggedIn) {\n            return true;\n        }\n\n        this._authService.redirectForLogin();\n        return false;\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { from, Observable, Subject, throwError } from 'rxjs';\nimport { catchError, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\n\nexport class EndpointBase {\n\n    private taskPauser: Subject<any>;\n    private isRefreshingLogin: boolean;\n\n    constructor(\n        protected http: HttpClient,\n        private authService: AuthService) {\n    }\n\n    public refreshLogin() {\n        return this.authService.refreshLogin().pipe(\n            catchError(error => {\n                return this.handleError(error, () => this.refreshLogin());\n            }));\n    }\n\n    protected get requestHeaders(): { headers: HttpHeaders | { [header: string]: string | string[]; } } {\n        const headers = new HttpHeaders({\n            Authorization: 'Bearer ' + this.authService.accessToken,\n            'Content-Type': 'application/json',\n            Accept: 'application/json, text/plain, */*'\n        });\n\n        return { headers };\n    }\n\n    protected handleError(error, continuation: () => Observable<any>) {\n        // If the error is about authentication. \n        if (error.status == 401) {\n            // Pause if the refreshing is in progress. \n            if (this.isRefreshingLogin) {\n                return this.pauseTask(continuation);\n            }\n\n            // Try to refresh to see if we can rescue \n            this.isRefreshingLogin = true;\n            return from(this.authService.refreshLogin())\n                .pipe(mergeMap(() => {\n                    this.isRefreshingLogin = false;\n                    // Run the resumed tasks \n                    this.resumeTasks(true);\n                    // Continue to run the paused \n                    return continuation();\n                }), catchError(refreshLoginError => {\n                    this.isRefreshingLogin = false;\n                    this.resumeTasks(false);\n                    // Logout and notify others of the changes \n                    this.authService.logout();\n\n                    if (refreshLoginError.status == 401 ||\n                        (refreshLoginError.error && refreshLoginError.error.error == 'invalid_grant')) {\n                        return throwError('session expired');\n                    } else {\n                        return throwError(`unknown refresh error (${refreshLoginError || 'server error'})`);\n                    }\n                }));\n        }\n\n        if (error.error && error.error.error == 'invalid_grant') {\n            // Logout \n            this.authService.logout();\n\n            return throwError((error.error && error.error.error_description) ?\n                `session expired (${error.error.error_description})` : 'session expired');\n        } else {\n            return throwError(error);\n        }\n    }\n\n    private pauseTask(continuation: () => Observable<any>) {\n        if (!this.taskPauser) {\n            this.taskPauser = new Subject();\n        }\n\n        return this.taskPauser.pipe(switchMap(continueOp => {\n            return continueOp ? continuation() : throwError('session expired');\n        }));\n    }\n\n    private resumeTasks(continueOp: boolean) {\n        setTimeout(() => {\n            if (this.taskPauser) {\n                this.taskPauser.next(continueOp);\n                this.taskPauser.complete();\n                this.taskPauser = null;\n            }\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NonAuthGuard implements CanActivate, CanActivateChild {\r\n\r\n    constructor(private readonly _authService: AuthService) { }\r\n\r\n    canActivate(\r\n        next: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\r\n        return this.checkNonLogin();\r\n    }\r\n\r\n    canActivateChild(\r\n        next: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\r\n        return this.checkNonLogin();\r\n\r\n    }\r\n\r\n    checkNonLogin(): boolean {\r\n        if (this._authService.isLoggedIn) {\r\n            this._authService.redirectLoginUser();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { OAuthModule } from 'angular-oauth2-oidc';\n\n@NgModule({\n    declarations: [],\n    imports: [\n        OAuthModule,\n    ],\n    exports: [],\n    providers: [\n    ]\n})\nexport class NgxOauth2Module { }\n"]}